(last
    # check self referenial loops with (print (last (assign n (1)) (add n (n))))
    
    (assert (assign n 5) 5)
    (assert (eq (add n 1) 6))
    (assert (eq (sub n 1) 4))
    (assert (eq (mul n 2) 10))
    (assert (eq (div n 2) 2))
    (assert (eq (for i n i) (0 1 2 3 4)))
    (assert (eq (for i n (i)) ((0) (1) (2) (3) (4))))
    (assert (eq (assign x (1 2 3 4 5 6 7 8 9 0)) x))
    (assert
        (eq
            (last
                (assign board ((1 2 3) (4 5 6) (7 8 9)))
                (assign row 1)
                (assign n (len board))
                (for col n (at board row col))
            )
            (4 5 6)
        )
    )
    (assert (eq (if 1 23 52) 23))
    (assert (eq (if 0 23 52) 52))
    (assert (eq (if (0) 23 52) 23))
    (assert (eq (if (()) 23 52) 23))
    (assert (eq (if () 23 52) 52))
    (assert (eq (if 1 23) 23))
    (assert (eq (if 0 23) 0))

    # Test 1 scope of variables : functions have only access to their params and local variables
    (assign n 5)
    (function test_scope1 (n)(assign n 0))
    (test_scope1 17)
    (assert (eq n 5))

    # Test 1 scope of variables : functions have only access to their params and local variables
    (assign m 5)
    (function test_scope2 ()(assign m 0))
    (assert (eq (test_scope2) 0))
    (assert (eq m 5))
    (assert (eq (at ((1 2 3) (4 5 6) (7 8 9)) 1) (4 5 6)))

    # Test functions and function calls with 3x3 magix square code
    (function get_row (board row)
        (for col (len board)
            (at board row col)
        )
    )
    (function get_col (board col)
        (for row (len board)
            (at board row col)
        )
    )
    (function get_diag1 (board)
        (for i (len board)
            (at board i i)
        )
    )
    (function get_diag2 (board)
        (last
            (assign n (len board))
            (for i n
                (at board (sub (sub n 1) i) i)
            )
        )
    )
    (assert (eq (sum (1 2 3)) 6))
    (assert (eq (sum (1 2 3 4)) 10))
    (function compute_sums_magic_square (board)
        (add
            (for row (len board) (sum (get_row board row)))
            (for col (len board) (sum (get_col board col)))
            ((sum (get_diag1 board)))
            ((sum (get_diag2 board)))
        )
    )
    (function is_magic_square (board)
        (last
            (assign n (len board))
            (assign magic_number (div (mul n (add (mul n n) 1)) 2))
            (assign sums (compute_sums_magic_square board))
            (assign ok (for i (len sums) (eq (at sums i) magic_number)))
            (assign count_ok (sum ok))
            (eq count_ok (len sums))
        )
    )
    (assert (eq (get_row ((1 2 3) (4 5 6) (7 8 9)) 1) (4 5 6)))
    (assert (eq (get_col ((1 2 3) (4 5 6) (7 8 9)) 1) (2 5 8)))
    (assert (eq (get_diag1 ((1 2 3) (4 5 6) (7 8 9)) 1) (1 5 9)))
    (assert (eq (get_diag2 ((1 2 3) (4 5 6) (7 8 9)) 1) (7 5 3)))
    (assert (eq (compute_sums_magic_square ((1 2 3) (4 5 6) (7 8 9))) (6 15 24 12 15 18 15 15)))
    (assert (eq (compute_sums_magic_square ((4 9 2) (3 5 7) (8 1 6))) (15 15 15 15 15 15 15 15)))
    (assert (eq (is_magic_square ((1 2 3) (4 5 6) (7 8 9))) 0))
    (assert (eq (is_magic_square ((4 9 2) (3 5 7) (8 1 6))) 1))
    
    (assert (eq (add (1 2 3) (4 5 6)) (1 2 3 4 5 6)))
    (assign board ((4 9 2) (3 5 7) (8 1 6)))
    (assert (eq (add
            (for row board (sum row))
            (for col (len board) (sum (get_col board col)))
            ((sum (get_diag1 board)))
            ((sum (get_diag2 board)))
        )
        (15 15 15 15 15 15 15 15))
    )
    # (function test1 (n) (div (mul n (mul n (add n (div (div 1 n) (mul n n))))) 2)) 
    (function test1 (n) (add n (div (div 1 n) (mul n n)))) 
    (print (test1 3))
    #(assign board ((4 9 2) (3 5 7) (8 1 6)))
    #(print (for i 3 (sub (at board i 2) (for (at 2 3 2) board 2))))
    #(assign board ((4 9 2) (3 5 7) (8 1 6)))
    #(print (for i 3 (sub (at board i 2) (for board board 2))))
    (function are_all_equal_to (values x) (if (len values) (eq (sum (for value values (eq value x))) (len values)) 0))
    #(function get_magic_number_n (n) (div (mul n (add (mul n n) 1)) 2))
    #(function is_magic_square_level2 (board) (are_all_equal_to (for row board (sum row)) (get_magic_number_n (len board))))
    #(assign board ((4 9 2) (3 5 7) (8 1 6)))
    #(print (is_magic_square_level2 board))
    (assign board ((1 2 3) (4 5 6) (7 8 9)))
    (assign row 0)
    (assign i 0)
    (print (are_all_equal_to row board))
    (print (len (list2 row i)))
)