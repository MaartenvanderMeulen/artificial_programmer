

for f in po* ; do grep '\#' $f | head -1 | sed 's/.*\# //'; done | sort -n | uniq -c

======== email naar Victor 20 Jan


Analyse suboptima van de 996 runs die van scratch beginnen en zonder oplossing stoppen.
Ze stoppen na 14 iteraties geen verbetering, ze doen geen grote opschudding.
De verschillende suboptima hieronder, de linker kolom is de frequentie.
for f in po* ; do grep '\#' $f | head -1 | sed 's/.*\# //'; done | sort -n | uniq -c
      1 0.600
      1 2.366
      1 2.766
      2 6.610
      1 8.015
      8 9.919
      7 10.719
     11 10.919
     18 11.885
     14 12.085
     50 13.053
    300 15.384
      1 17.800
    581 18.275
Suboptimum met waarde 18.275 komt het meest voor.
grep -h -e 'gen  0 best' lo* | sed 's/sc.*//' | sort | uniq -c
      1 gen  0 best  15.384 
    999 gen  0 best  18.275 
Er zijn 999 runs met een initiele populatie met waarde 18.275, 1 run begint met 15.384.
Die 581 runs beginnen dus in 18.275 en komen nooit verder!


Effect opschudding via her-parachuten op de 18.275 suboptima.
Ik was benieuwd wat het effect was van opschudding via re-entering-parachuting-fase op de 18.275 populaties.
Dat heb ik onderzocht met samenvoegen van 18.275 suboptima.  Samenvoegen van de 581 suboptima met waarde 18.275 geeft:
	1/200=~0.5%.
Voor dit experiment zijn dus 200 runs gedaan, en iedere run had een startpopulatie met 4000/581=6 random
individuals uit ieder van de 581 suboptima.  Conclusie: ontsnappen uit 18.275 via her-parachuten lukt niet.

Ter vergelijking, samenvoegen van alle suboptima gaf:
	47/200=~23.5%
Voor dit experiment zijn 1000 runs gedaan, en iedere run had een startpopulatie met 4000/996=4 random
individuals uit ieder van de 996 suboptima.

Een significant verschil in performance.


Resterende vragen voor vervolganalyses die in me opgekomen zijn: 
- hoeveel families hebben evaluatie 18.275?
		- analyse_best optie in params
- wat doet de meest voorkomende familie? (Alle code snippets in die familie hebben dezelfde output, wat is die output?)
		- snippet uit analyse_best analyseren, sneller is de uitvoer van de snippet ook afdrukken
- welke ontsnappingen zijn er uit 18.275?  Is dat terug te voeren op bepaalde families?
		- daar was een speciaal stukje code voor, 24 dec "follow subopt.py"

=========================== na gesprek met Victor =================================
- acsh 1000 doen = baseline = 7/1000
output in tmp/acshx/analysis.txt
  error family_index individuals shortest_individual                                          last_output                    last_error                    
 18.275            0         515 append(sorted_data, elem)                                    (81, 82, 87, 88, 84)           0.000 0.000 0.000 0.000 14.196
 18.234           18           1 for(i, append(append(sorted_data, elem), if_then_else(sorted (81, 82, 84, 84, 84, (81, 82,  0.143 1.000 0.000 0.000 13.196
 15.384            1         309 append(for(k, sorted_data, assign(elem, k)), assign(k, elem) (81, 82, 87, 88, 88)           0.000 0.000 2.828 0.000 6.196 
 13.053            3          27 append(for(k, sorted_data, assign(sorted_data, k)), if_then_ (81, 82, 87, 88, 88)           0.000 0.000 2.828 0.000 6.196 
 13.053           10           9 last3(for(k, sorted_data, if_then_else(if_then_else(i, le(el (81, 82, 87, 88, 88)           0.000 0.000 2.828 0.000 6.196 
 13.053           11           2 last3(assign(k, if_then_else(sorted_data, i, elem)), for(i,  (81, 82, 87, 88, 88)           0.000 0.000 2.828 0.000 6.196 
 13.053           19           1 append(sorted_data, last3(elem, assign(sorted_data, for(k, s (81, 82, 87, 88, 88)           0.000 0.000 2.828 0.000 6.196 
 12.817            2           9 append(sorted_data, if_then_else(for(elem, sorted_data, appe (81, 82, 87, 88, 88)           0.000 0.000 2.828 0.000 6.196 
 12.519            7           1 append(append(sorted_data, last3(for(k, sorted_data, append( (81, 82, 87, 88, 88, (81, 82,  0.143 1.000 0.000 0.000 6.196 
 12.519           13           2 append(append(for(i, sorted_data, last3(append(k, elem), ass (81, 82, 87, 88, 88, (81, 82,  0.143 1.000 0.000 0.000 6.196 
 12.519           16           1 append(append(for(k, sorted_data, last3(assign(sorted_data,  (81, 82, 87, 88, 88, ((81, 82, 0.143 1.000 0.000 0.000 6.196 
 12.519           20           1 append(append(for(i, sorted_data, assign(elem, last3(assign( (81, 82, 87, 88, 88, (81, 82,  0.143 1.000 0.000 0.000 6.196 
 12.085            6          27 append(last3(assign(i, elem), i, append(for(k, sorted_data,  (81, 82, 87, 88, 88, 84)       0.000 1.000 0.000 0.000 6.196 
 11.885            8          35 append(last3(le(i, k), assign(k, sorted_data), last3(for(i,  (81, 82, 87, 88, 88, 84)       0.000 1.000 0.000 0.000 6.196 
 10.919            9          18 append(append(for(sorted_data, sorted_data, assign(k, sorted (81, 82, 87, 88, 88, 84)       0.000 1.000 0.000 0.000 6.196 
 10.919           12           1 append(append(for(sorted_data, sorted_data, sorted_data), if (81, 82, 87, 88, 88, 84)       0.000 1.000 0.000 0.000 6.196 
 10.719            4          21 if_then_else(for(k, sorted_data, assign(i, if_then_else(le(e (81, 82, 87, 88, 88, 84)       0.000 1.000 0.000 0.000 6.196 
  9.919            5          10 append(if_then_else(if_then_else(for(k, sorted_data, for(ele (81, 82, 87, 88, 88, 84)       0.000 1.000 0.000 0.000 6.196 
  8.532           15           1 append(append(for(sorted_data, for(sorted_data, sorted_data, (81, 82, 84, 88, 88, (81, 82,  0.143 1.000 0.000 0.000 1.000 
  6.610           17           1 append(for(sorted_data, sorted_data, if_then_else(le(assign( (81, 82, 84, 84, 88)           0.000 0.000 1.000 0.000 5.196 
  2.766           14           1 append(for(k, sorted_data, if_then_else(le(elem, k), assign( (81, 82, 84, 88, 88)           0.000 0.000 1.000 0.000 1.000 
                             993                                                                                             0.857 12.000 18.971 0.000 133.
- default gewichten zetten in evaluatie functie op grond van acsh 993 suboptima totale populatie analyse.
0/1000
Maar het is dan ook niet meteen duidelijk hoe dynamic weights moeten werken...
Als in populatie som fout stijgt in een iteratie : gewicht / 1.1;
Als in populatie som fout daalt in een iteratie : gewicht * 1.1;
beginnen met default gewichten terug op 1.0 en dynamische gewichten ook op 1.0.  
- dynamic weights werkend maken
- baseline na dynamic weights weer werkend 7/1000.  Samenvatting aanpassingen tov 4/1000
  - error wegens type iets gedifferentieerd (heeft effect 7/1000)
  - local search : bij gelijke evaluatie is de individual van van de kleinste familie beter (heeft geen effect)
  - stuck detectie : nu alleen op family index van de beste
- dynamic weights met "dempen" van fouten verergeringen : 3/1000
- dynamic weights met "versterken" van fouten verergeringen : 2/1000
- evaluatie verder uitsplisen, zonder dynamic weights
  - 5e dim anders ophouden bij len(expected) : 
  - 6e dimensie hoeveel van de volgorde klopt? : 

============================= 23 Jan
a maxevals 70000, 0% solved
b maxevals 300000, 70/1024=6.8% solved.
bb baseline 141600, 50% solved
- error dim1 1 : aantal foute types voor de eerste min(min(len(actual)),min(len(expect))), elke fout 1/len(expect) tellen
  resultaat : haalt 50% niet 510/1024.  Maar we laten het er toch maar in want het is een mooiere fout.
- error dim1 2 : len(extract_numers_list(actual)) ipv len(actual)
  resultaat 669/1024=65%, significant.  maxeval 106987.
- error dim1 6 : staan de goede getallen op hun plaats: ook error geven voor ontbrekende getallen.
  resultaat 731/1024=71%, significant, maxeval 70641
  stopped	merge_elem	12	gen	106987	evals
  stopped	merge_elem	13	gen	106987	evals
  stopped	merge_elem	14	gen	106987	evals
  dus nog genoeg iteraties
- error dim 8&9 aanzetten
  Niet significant (52.4%)
- error 5 met actual_list ipv actual.  Werkt duidelik slechter.
- error 6&7 met actual_list ipv actual.  Werkt 510/1024=<50%.  We gaan toch actual_list gebruiken want zo is 6&7 atomairder.
- extra error voor aantal '()' lege lijsten.
  resultaat.  Werkt niet significant verschillend.  We gaan het gebruiken, want het is een dimensie die door niks gecoverered wordt
- default weights gebruiken.  Werkt heel slecht.  Vreemd.
- eens kijken hoe 'a' & 'b' het nu doet?
bb baseline 70641, 50% solved
a : 0%
b : 20/1024 ??? dat is veel lager dan eerst!
bb : 491/1024 bij maxevals 150000.  Dus weer terug bij af.
1341:
gen 0 best 0.542 sc 0 count_best 4 family 43 zz 254 254 if_then_else(elem, for(sorted_data, append(for(k, sorted_data, assign(assign(k, elem), k)), sorted_d
gen 1 best 0.542 sc 1 count_best 5 family 43 zz 711 1386 if_then_else(elem, for(sorted_data, append(for(k, sorted_data, assign(assign(k, elem), k)), sorted_d
gen 2 best 0.542 sc 2 count_best 4 family 43 zz 709 2262 if_then_else(append(for(k, i, sorted_data), k), for(sorted_data, append(sorted_data, sorted_data), a
gen 3 best 0.542 sc 3 count_best 9 family 43 zz 678 3042 if_then_else(append(for(k, i, sorted_data), k), for(sorted_data, append(sorted_data, sorted_data), a
gen 4 best 0.542 sc 4 count_best 6 family 43 zz 91 5126 if_then_else(append(for(k, elem, sorted_data), k), for(sorted_data, append(sorted_data, sorted_data)
gen 5 best 0.542 sc 5 count_best 13 family 43 zz 89 6755 if_then_else(append(for(k, i, k), k), for(sorted_data, append(sorted_data, sorted_data), assign(k, i
gen 6 best 0.542 sc 6 count_best 24 family 43 zz 90 7961 append(for(i, sorted_data, if_then_else(le(assign(sorted_data, i), elem), sorted_data, assign(k, if_
gen 7 best 0.542 sc 7 count_best 28 family 43 zz 85 8897 if_then_else(elem, for(sorted_data, append(sorted_data, sorted_data), assign(k, if_then_else(if_then
gen 8 best 0.542 sc 8 count_best 29 family 43 zz 74 9834 if_then_else(if_then_else(i, sorted_data, elem), for(sorted_data, append(sorted_data, sorted_data), 
gen 9 best 0.542 sc 9 count_best 30 family 43 zz 67 10567 if_then_else(append(sorted_data, k), for(sorted_data, append(sorted_data, sorted_data), assign(k, if
gen 10 best 0.542 sc 10 count_best 34 family 43 zz 72 11103 if_then_else(elem, for(sorted_data, append(sorted_data, sorted_data), assign(k, if_then_else(if_then
gen 11 best 0.542 sc 11 count_best 28 family 43 zz 76 11769 append(for(sorted_data, assign(append(k, k), sorted_data), assign(k, if_then_else(le(assign(i, sorte
gen 12 best 0.542 sc 12 count_best 35 family 43 zz 76 12385 if_then_else(append(last3(k, k, sorted_data), k), for(sorted_data, append(sorted_data, sorted_data),
gen 13 best 0.542 sc 13 count_best 34 family 43 zz 67 13135 if_then_else(elem, for(sorted_data, append(sorted_data, sorted_data), assign(k, if_then_else(if_then
gen 14 best 0.542 sc 14 count_best 33 family 43 zz 70 13923 if_then_else(elem, for(sorted_data, append(sorted_data, sorted_data), assign(k, if_then_else(if_then
gen 15 best 0.542 sc 15 count_best 37 family 43 zz 60 14479 if_then_else(last3(sorted_data, sorted_data, elem), for(sorted_data, append(sorted_data, sorted_data
gen 16 best 0.542 sc 16 count_best 36 family 43 zz 58 15009 if_then_else(elem, for(sorted_data, append(sorted_data, sorted_data), assign(k, if_then_else(if_then
RuntimeWarning: max evaluations reached
stopped	merge_elem	17	gen	150000	evals
- eerst eens family op error_vec proberen.


========================= maanda 25 Jan

in bb, (9 minuten, op b van ook 9 minuten, op sameplesize 32)
(base) :) for s in `grep -l solv lo* | sed 's/log_//' | sed 's/.txt//'` ; do expr $s / 32 ; done | uniq -c
      1 36
     27 39
     32 43
     32 46


============================= speed improvements wo 27 Jan
met deap_str
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   60.014   60.014 {built-in method builtins.exec}
        1    0.002    0.002   60.014   60.014 /home/maarten/code_synthesis/ga_search1.py:214(ga_search_impl)
       25    0.068    0.003   56.751    2.270 /home/maarten/code_synthesis/ga_search1.py:82(generate_offspring)
      908    0.365    0.000   36.585    0.040 /home/maarten/code_synthesis/ga_search_tools.py:377(crossover_with_local_search)
   167013    0.439    0.000   33.383    0.000 /home/maarten/code_synthesis/ga_search_tools.py:92(evaluate_individual)
    84523    0.364    0.000   27.425    0.000 /home/maarten/code_synthesis/ga_search_tools.py:67(evaluate_individual_impl)
   804653    0.388    0.000   26.687    0.000 /home/maarten/code_synthesis/ga_search_tools.py:19(make_pp_str)
   804653   16.893    0.000   26.299    0.000 /home/maarten/miniconda3/lib/python3.8/site-packages/deap/gp.py:88(__str__)
    84523    0.472    0.000   18.789    0.000 /home/maarten/code_synthesis/cpp_coupling.py:177(run_on_all_inputs)
  1183322    6.611    0.000   16.250    0.000 /home/maarten/code_synthesis/cpp_coupling.py:152(run_once)

met pp_str
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   60.002   60.002 {built-in method builtins.exec}
        1    0.002    0.002   60.002   60.002 /home/maarten/code_synthesis/ga_search1.py:214(ga_search_impl)
       46    0.077    0.002   57.583    1.252 /home/maarten/code_synthesis/ga_search1.py:82(generate_offspring)
   297530    0.735    0.000   46.806    0.000 /home/maarten/code_synthesis/ga_search_tools.py:93(evaluate_individual)
   141381    0.596    0.000   44.535    0.000 /home/maarten/code_synthesis/ga_search_tools.py:68(evaluate_individual_impl)
     1754    0.610    0.000   35.430    0.020 /home/maarten/code_synthesis/ga_search_tools.py:378(crossover_with_local_search)
   141381    0.799    0.000   31.707    0.000 /home/maarten/code_synthesis/cpp_coupling.py:177(run_on_all_inputs)
  1979334   11.070    0.000   27.458    0.000 /home/maarten/code_synthesis/cpp_coupling.py:152(run_once)
  1979334    0.557    0.000   15.190    0.000 /home/maarten/code_synthesis/cpp_coupling.py:141(convert_c_output_to_python)

met consistency check in copy_individual
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   60.026   60.026 {built-in method builtins.exec}
        1    0.002    0.002   60.026   60.026 /home/maarten/code_synthesis/ga_search1.py:214(ga_search_impl)
       46    0.079    0.002   57.581    1.252 /home/maarten/code_synthesis/ga_search1.py:82(generate_offspring)
   299667    0.756    0.000   46.764    0.000 /home/maarten/code_synthesis/ga_search_tools.py:92(evaluate_individual)
   142053    0.617    0.000   44.462    0.000 /home/maarten/code_synthesis/ga_search_tools.py:67(evaluate_individual_impl)
     1765    0.615    0.000   35.357    0.020 /home/maarten/code_synthesis/ga_search_tools.py:377(crossover_with_local_search)
   142053    0.799    0.000   31.579    0.000 /home/maarten/code_synthesis/cpp_coupling.py:177(run_on_all_inputs)
  1988742   11.079    0.000   27.304    0.000 /home/maarten/code_synthesis/cpp_coupling.py:152(run_once)
  1988742    0.570    0.000   15.021    0.000 /home/maarten/code_synthesis/cpp_coupling.py:141(convert_c_output_to_python)
20971019/1983567   13.407    0.000   14.450    0.000 /home/maarten/code_synthesis/cpp_coupling.py:121(convert_c_output_to_python_impl)
     2577    0.102    0.000   10.161    0.004 /home/maarten/code_synthesis/ga_search_tools.py:423(replace_subtree_at_best_location)
23541368/190157    5.064    0.000    7.976    0.000 /home/maarten/code_synthesis/evaluate.py:16(recursive_tuple)
3971719/187459    2.912    0.000    7.837    0.000 /home/maarten/code_synthesis/evaluate.py:19(<listcomp>)
  1426419    0.694    0.000    7.185    0.000 /home/maarten/code_synthesis/ga_search_tools.py:19(make_pp_str)
  1426419    4.383    0.000    6.124    0.000 /home/maarten/code_synthesis/ga_search_tools.py:20(<listcomp>)
   356099    0.620    0.000    5.946    0.000 /home/maarten/code_synthesis/ga_search_tools.py:321(copy_individual)
   752798    1.120    0.000    5.477    0.000 /home/maarten/code_synthesis/ga_search_tools.py:466(consistency_check_ind)
     5688    0.021    0.000    5.335    0.001 /home/maarten/code_synthesis/ga_search_tools.py:333(cxOnePoint)
     3436    0.108    0.000    4.996    0.001 /home/maarten/code_synthesis/evaluate.py:488(compute_raw_error_matrix)
     8627    0.027    0.000    4.018    0.000 /home/maarten/code_synthesis/ga_search_tools.py:409(mutUniform)
    48104    0.064    0.000    3.854    0.000 /home/maarten/code_synthesis/evaluate.py:390(compute_error_merge_elem)
    48104    0.959    0.000    3.778    0.000 /home/maarten/code_synthesis/evaluate.py:98(compute_error_list_of_ints)
   142053    2.615    0.000    3.353    0.000 /home/maarten/code_synthesis/cpp_coupling.py:11(compile_deap)
     7453    0.208    0.000    2.259    0.000 /home/maarten/code_synthesis/ga_search1.py:36(select_parents)
        1    0.000    0.000    2.206    2.206 /home/maarten/code_synthesis/ga_search_tools.py:293(generate_initial_population)
        1    0.014    0.014    2.206    2.206 /home/maarten/code_synthesis/ga_search_tools.py:165(generate_initial_population_impl)
 28600191    2.040    0.000    2.074    0.000 {built-in method builtins.isinstance}
 23823420    1.332    0.000    1.332    0.000 {method 'append' of 'list' objects}
     7453    1.206    0.000    1.206    0.000 /home/maarten/code_synthesis/ga_search1.py:47(<listcomp>)
   476394    0.743    0.000    0.929    0.000 /home/maarten/code_synthesis/evaluate.py:51(_distance_with_closest_numbers)


Nu met 100 seconden, en pp_str weer terug naar str(ind)
Thu Jan 28 10:22:14 2021    tmp/stats.txt

         317107665 function calls (252470580 primitive calls) in 100.023 seconds

   Ordered by: cumulative time
   List reduced from 156 to 30 due to restriction <30>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000  100.024  100.024 {built-in method builtins.exec}
        1    0.002    0.002  100.024  100.024 /home/maarten/code_synthesis/ga_search1.py:214(ga_search_impl)
       65    0.083    0.001   96.512    1.485 /home/maarten/code_synthesis/ga_search1.py:82(generate_offspring)
   460595    1.119    0.000   73.122    0.000 /home/maarten/code_synthesis/ga_search_tools.py:95(evaluate_individual)
     2475    0.936    0.000   65.255    0.026 /home/maarten/code_synthesis/ga_search_tools.py:380(crossover_with_local_search)
   193984    0.806    0.000   56.899    0.000 /home/maarten/code_synthesis/ga_search_tools.py:70(evaluate_individual_impl)
   193984    1.038    0.000   41.260    0.000 /home/maarten/code_synthesis/cpp_coupling.py:182(run_on_all_inputs)
  2715776    2.210    0.000   35.484    0.000 /home/maarten/code_synthesis/cpp_coupling.py:161(run_once)
  1058203    0.504    0.000   34.819    0.000 /home/maarten/code_synthesis/ga_search_tools.py:19(make_pp_str)
  1058403   22.019    0.000   34.323    0.000 /home/maarten/miniconda3/lib/python3.8/site-packages/deap/gp.py:88(__str__)
  2715776    0.733    0.000   19.057    0.000 /home/maarten/code_synthesis/cpp_coupling.py:141(convert_c_output_to_python)
     3727    0.151    0.000   18.594    0.005 /home/maarten/code_synthesis/ga_search_tools.py:426(replace_subtree_at_best_location)
28067709/2709089   16.998    0.000   18.324    0.000 /home/maarten/code_synthesis/cpp_coupling.py:121(convert_c_output_to_python_impl)
  2715776   12.680    0.000   14.031    0.000 /home/maarten/code_synthesis/cpp_coupling.py:152(call_cpp_interpreter)
31035883/253470    6.377    0.000   10.033    0.000 /home/maarten/code_synthesis/evaluate.py:16(recursive_tuple)
5271879/250261    3.655    0.000    9.848    0.000 /home/maarten/code_synthesis/evaluate.py:19(<listcomp>)
     4249    0.130    0.000    5.549    0.001 /home/maarten/code_synthesis/evaluate.py:488(compute_raw_error_matrix)
     5688    0.020    0.000    5.306    0.001 /home/maarten/code_synthesis/ga_search_tools.py:336(cxOnePoint)
   193984    3.527    0.000    4.579    0.000 /home/maarten/code_synthesis/cpp_coupling.py:11(compile_deap)
    59486    0.076    0.000    4.282    0.000 /home/maarten/code_synthesis/evaluate.py:390(compute_error_merge_elem)
     8627    0.026    0.000    4.222    0.000 /home/maarten/code_synthesis/ga_search_tools.py:412(mutUniform)
    59486    1.077    0.000    4.191    0.000 /home/maarten/code_synthesis/evaluate.py:98(compute_error_list_of_ints)
 68766295    3.769    0.000    3.769    0.000 {method 'append' of 'list' objects}
  7715271    1.359    0.000    3.482    0.000 /home/maarten/miniconda3/lib/python3.8/site-packages/deap/gp.py:203(format)
 69533699    3.390    0.000    3.390    0.000 {built-in method builtins.len}
        1    0.000    0.000    2.454    2.454 /home/maarten/code_synthesis/ga_search_tools.py:296(generate_initial_population)
        1    0.013    0.013    2.454    2.454 /home/maarten/code_synthesis/ga_search_tools.py:168(generate_initial_population_impl)
     8163    0.212    0.000    2.215    0.000 /home/maarten/code_synthesis/ga_search1.py:36(select_parents)
  7715271    2.123    0.000    2.123    0.000 {method 'format' of 'str' objects}
 11545445    2.006    0.000    2.006    0.000 /home/maarten/miniconda3/lib/python3.8/site-packages/deap/gp.py:230(format


Dus "laaghangend fruit":
- gp __str__ 34% (--> make_pp_str 8%)


- recursive_tuple 10%
- listcomp 10%
- compute_raw_error_matrix 6%

Iets moeilijker, maar "the way forward":
- convert_c_output_to_python 19%
- compute_error_list_of_ints 4%

Tesamen al 83%.  call_cpp_interpreter kost : 14%

Verminderen van __str__ calls (in consistency checks en zxo) hielp ook al:
- a_a32_experiment_doorloop4h/time_1396.txt : total 390 (32 threads)
- a/time_1396.txt : total 160 (maar dit is singlecore).  Beter dit eens te doen met een opgewarmde CPU.
- en na vervangen gp.__str__ door pp_str: totaal 126 (ook singlecore), 126/160=0.79

===================================== 8 Feb, cProfile on run 1900

   Ordered by: cumulative time
   List reduced from 128 to 30 due to restriction <30>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   76.287   76.287 {built-in method builtins.exec}
        1    0.000    0.000   76.287   76.287 <string>:1(<module>)
        1    0.000    0.000   76.287   76.287 find_new_function.py:96(call_ga_search)
        1    0.003    0.003   76.287   76.287 ga_search1.py:250(ga_search_impl)
       42    0.098    0.002   73.762    1.756 ga_search1.py:134(generate_offspring)
   394794    0.789    0.000   67.515    0.000 ga_search_tools.py:98(evaluate_individual)
   172837    0.677    0.000   66.689    0.000 ga_search_tools.py:75(evaluate_individual_impl)
   172837    5.689    0.000   65.878    0.000 cpp_coupling.py:255(compute_error_matrix)
     1554    1.080    0.001   52.290    0.034 ga_search_tools.py:448(crossover_with_local_search)
     2377    0.140    0.000   13.078    0.006 ga_search_tools.py:516(replace_subtree_at_best_location)

  2419718   37.349    0.000   39.375    0.000 cpp_coupling.py:203(call_cpp_interpreter)
                                              hier valt dus niks meer aan te doen

  2419718   12.159    0.000   12.159    0.000 cpp_coupling.py:189(convert_c_output_to_pp_str)
                                              dit kan veel sneller, maar vereist toevoeging aan de C++ code
                                              De C++ moet dan een int-vector vullen, die aan de python kant
                                              dan via "
                                                      model_outputs.append(tuple(model_output[:model_output_len]))
                                                 family_key = tuple(model_outputs)" omgezet wordt naar een family_key

   496027    0.413    0.000    1.200    0.000 ga_search_tools.py:20(make_pp_str)
   172837    5.176    0.000    6.790    0.000 cpp_coupling.py:14(compile_deap)
  4013309    1.100    0.000    1.596    0.000 cpp_coupling.py:263(<lambda>)
   492208    0.954    0.000    1.192    0.000 gp.py:61(__setitem__)
    15962    0.398    0.000    0.983    0.000 gp.py:587(generate)
   520693    0.751    0.000    0.894    0.000 gp.py:172(searchSubtree)
    13441    0.012    0.000    0.717    0.000 gp.py:517(genFull)
     5025    0.007    0.000    0.706    0.000 gp.py:560(genHalfAndHalf)
  4741848    0.641    0.000    0.700    0.000 {built-in method builtins.isinstance}
                                              dit kan sneller na overnemen dp?
 12252100    1.811    0.000    1.811    0.000 {built-in method _ctypes.byref}
                                              dit kan sneller door cpp_interpret & cpp_evaluate te combineren,
                                              en meteen voor alle inputs te doen 9dus 14x)
   492208    0.660    0.000    0.866    0.000 ga_search_tools.py:416(copy_individual)
                                              dit kan sneller door individuals in cx te hergebruiken
    29268    0.212    0.000    0.946    0.000 ga_search1.py:25(sample_fam_cx_fitness)
                                              dat is nog best veel

========================================== 17 Feb

a0 baseline, op tmp/analyse/f689 (222 seeds)
    "parents_keep_all_duration": 0,
    "parents_keep_fraction_per_family": false,
    "use_family_representatives_for_mutation": false,
    "use_crossover_for_mutations": false
a1 
    "parents_keep_all_duration": 2,
    "parents_keep_fraction_per_family": false,
    "use_family_representatives_for_mutation": false,
    "use_crossover_for_mutations": false

============================================ 5 Maart

hoofdlijn a2
current gfam id 3 error 110.67016411012818 append(sorted_data, elem)
volgende stuk in hoofdvariant heeft count 507
current gfam id 26 error 108.02343874618622 append(for(sorted_data, sorted_data, assign(elem, sorted_data)), elem)
volgende stuk in hoofdvariant heeft count 176
current gfam id 35 error 87.6048317099097 append(for(k, sorted_data, if_then_else(le(elem, k), assign(elem, k), k)), elem)
volgende stuk in hoofdvariant heeft count 53
current gfam id 789 error 85.58075911285353 append(sorted_data, if_then_else(for(i, sorted_data, assign(sorted_data, if_then_else(le(sorted_data, i), i, elem))), sorted_data, elem))
volgende stuk in hoofdvariant heeft count 74
current gfam id 1118 error 85.07293982976316 append(append(sorted_data, if_then_else(for(i, sorted_data, assign(sorted_data, if_then_else(le(sorted_data, i), i, elem))), sorted_data, elem)), elem)
volgende stuk in hoofdvariant heeft count 23
current gfam id 205 error 79.7210270670104 append(append(for(sorted_data, sorted_data, assign(i, sorted_data)), if_then_else(i, i, elem)), elem)
volgende stuk in hoofdvariant heeft count 94
current gfam id 710 error 78.7210270670104 append(if_then_else(for(sorted_data, sorted_data, assign(i, sorted_data)), append(sorted_data, i), sorted_data), elem)
volgende stuk in hoofdvariant heeft count 27
current gfam id 339 error 72.89259994226421 append(if_then_else(for(sorted_data, sorted_data, assign(i, sorted_data)), append(sorted_data, if_then_else(le(elem, i), i, elem)), sorted_data), elem)
volgende stuk in hoofdvariant heeft count 21
current gfam id 1292 error 57.41813989756334 append(if_then_else(sorted_data, append(for(k, sorted_data, if_then_else(le(assign(i, k), elem), k, elem)), if_then_else(le(elem, i), i, elem)), sorted_data), elem)
volgende stuk in hoofdvariant heeft count 16
current gfam id 1039 error 44.41813989756334 append(for(k, sorted_data, if_then_else(le(assign(i, k), elem), i, elem)), if_then_else(le(elem, i), i, elem))
volgende stuk in hoofdvariant heeft count 10
current gfam id 1220 error 44.34636643502705 append(for(k, for(elem, sorted_data, assign(i, elem)), if_then_else(le(le(i, assign(i, k)), le(i, elem)), k, elem)), if_then_else(le(elem, i), i, elem))
volgende stuk in hoofdvariant heeft count 23
current gfam id 1663 error 44.31716929414391 append(for(k, for(elem, sorted_data, assign(i, elem)), if_then_else(le(le(i, k), le(i, elem)), k, elem)), if_then_else(le(elem, i), i, elem))
volgende stuk in hoofdvariant heeft count 7
current gfam id 18379 error 36.1320585727818 append(for(sorted_data, for(sorted_data, sorted_data, assign(i, sorted_data)), if_then_else(le(if_then_else(k, i, elem), sorted_data), assign(k, elem), sorted_data)), if_then_else(k, i, elem))
volgende stuk in hoofdvariant heeft count 5
current gfam id 1999 error 28.792359225002578 append(for(k, sorted_data, if_then_else(le(elem, k), if_then_else(assign(k, elem), if_then_else(for(k, sorted_data, assign(elem, assign(sorted_data, k))), k, sorted_data), k), k)), elem)
volgende stuk in hoofdvariant heeft count 7
current gfam id 38779 error 28.161843268516677 for(sorted_data, append(sorted_data, for(sorted_data, sorted_data, for(sorted_data, if_then_else(le(elem, i), sorted_data, last3(assign(i, sorted_data), sorted_data, k)), assign(i, sorted_data)))), if_then_else(le(sorted_data, elem), sorted_data, if_then_else(k, i, assign(k, elem))))
volgende stuk in hoofdvariant heeft count 1
current gfam id 38817 error 24.83989206885686 for(sorted_data, append(for(k, sorted_data, if_then_else(le(elem, k), assign(i, if_then_else(i, k, elem)), k)), last3(for(k, sorted_data, if_then_else(le(elem, k), assign(elem, if_then_else(le(elem, i), k, assign(i, elem))), assign(i, elem))), elem, elem)), if_then_else(le(last3(sorted_data, for(sorted_data, sorted_data, assign(k, if_then_else(le(k, elem), sorted_data, k))), sorted_data), elem), sorted_data, assign(elem, k)))
end solution not connected to start

hoofdlijn a3
write_main_line
    start gfam id 3
    start representative append(sorted_data, elem)
    start raw_error 110.67016411012818
    end gfam id 2446
    end representative append(for(i, sorted_data, if_then_else(le(elem, i), last3(assign(k, elem), assign(elem, i), k), i)), elem)
    end raw_error 0.0
current gfam id 3 error 110.67016411012818 append(sorted_data, elem)
volgende stuk in hoofdvariant heeft count 142
current gfam id 26 error 108.02343874618622 append(for(sorted_data, sorted_data, assign(elem, sorted_data)), elem)
volgende stuk in hoofdvariant heeft count 67
current gfam id 35 error 87.6048317099097 append(for(i, sorted_data, if_then_else(le(elem, i), assign(elem, i), i)), elem)
volgende stuk in hoofdvariant heeft count 24
current gfam id 785 error 85.58075911285353 append(for(k, sorted_data, if_then_else(i, if_then_else(le(k, elem), k, assign(elem, k)), assign(i, k))), elem)
volgende stuk in hoofdvariant heeft count 4
current gfam id 4635 error 82.7377754877858 append(for(sorted_data, sorted_data, if_then_else(k, if_then_else(le(sorted_data, elem), sorted_data, if_then_else(for(sorted_data, sorted_data, assign(elem, sorted_data)), elem, i)), assign(k, sorted_data))), elem)
volgende stuk in hoofdvariant heeft count 3
current gfam id 6629 error 80.17225333879993 append(for(i, sorted_data, if_then_else(le(sorted_data, if_then_else(le(elem, assign(sorted_data, i)), last3(for(i, sorted_data, assign(elem, i)), sorted_data, elem), k)), elem, sorted_data)), last3(for(i, sorted_data, assign(elem, sorted_data)), i, elem))
volgende stuk in hoofdvariant heeft count 2
current gfam id 3790 error 59.753646302523414 append(for(sorted_data, sorted_data, last3(for(i, i, for(i, if_then_else(le(elem, sorted_data), assign(elem, sorted_data), k), assign(sorted_data, i))), last3(assign(i, if_then_else(le(elem, sorted_data), assign(elem, sorted_data), elem)), le(i, k), sorted_data), sorted_data)), elem)
volgende stuk in hoofdvariant heeft count 2
current gfam id 1769 error 52.65767798402059 append(for(sorted_data, sorted_data, last3(for(i, if_then_else(le(elem, sorted_data), assign(elem, sorted_data), for(i, k, elem)), assign(sorted_data, i)), elem, sorted_data)), elem)
volgende stuk in hoofdvariant heeft count 11
current gfam id 1877 error 44.41813989756334 append(
  for(sorted_data, sorted_data,
    if_then_else(le(assign(k, sorted_data), elem), if_then_else(assign(k, elem), sorted_data, i), elem)),
  if_then_else(sorted_data, k, elem))
volgende stuk in hoofdvariant heeft count 5
end gfam id 2446 error 0.0 append(
  for(i, sorted_data,
    if_then_else(le(elem, i), last3(assign(k, elem), assign(elem, i), k), i)),
  elem)

a3 mainline (nw, 221/1024):
write_main_line
append(sorted_data, elem) # error 110.670, mainlines 142
append(for(i, sorted_data, assign(elem, i)), elem) # error 108.023, mainlines 67
append(for(i, sorted_data, if_then_else(le(elem, i), assign(elem, i), i)), elem) # error 87.605, mainlines 1
append(for(i, sorted_data, if_then_else(le(elem, i), last3(assign(k, elem), assign(elem, i), k), i)), elem) # error 0.0

aa mainline (oud, 335/1000):
append(sorted_data, elem) # error 110.670, mainlines 333
append(for(i, sorted_data, assign(elem, i)), elem) # error 108.023, mainlines 312
append(for(i, sorted_data, if_then_else(le(i, elem), i, assign(elem, i))), elem) # error 87.605, mainlines 18
append(for(i, sorted_data, if_then_else(for(sorted_data, le(assign(sorted_data, elem), i), assign(elem, i)), sorted_data, i)), elem) # error 0.0
