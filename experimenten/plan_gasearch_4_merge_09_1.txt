TODO
- onderzoeken hoe ontsnapt wordt aan 77.6
e	- Hard coderen : indien child van mut of cx < 77.6 en bestpop momenteel 77.6, schrijf dan die 2 parents weg en stop aan einde make offspring.

- andere meta opschuddingen
	- taboo van set van waarden naar 1 waarde
- andere opschuddingen
	- fraction_parents aanpassing --> - 20% * popN
	- varieren met voorrang van de offspring indien we in suboptimum zitten (kan ook door #parents eerst 50% te laten zijn)

SOMEDAY
	- Interpretator : omzetten naar C++ (en daarna naar OpenCL)
	- hyperparameter tuning met 1000 runs

09AA
	- p enter subopt 0.9469469469469469 check 999
	- p stuck at subopt 0.9945425087405133 check 117270

09AC
	- met fractie parents wegggooien
	- Duurde 13 uur en 32 minuten (24 threads)
	- 207 oplossingen
	- p enter subopt 0.9433962264150944 check 1007
	- p stuck at subopt 0.9460122699386503 check 17115

09ACA
	- paranets_fraction meteen weer op 1 indien verandering van beste waarde
	- grote opschudding = alle individuals met beste waarde VOOR maken van kinderen verwijderen (uit de GENE pool)
	- 263 solved, 728 stopped (allemaal timeout 1200 seconden)
	- p enter subopt 0.6366711772665764
	- p stuck at subopt 0.8853018372703412

merge_elem
(cons (if_then_else (len sorted_data) (first sorted_data) (if_then_else elem elem sorted_data)) (rest (cons sorted_data (cons (if_then_else (rest sorted_data) (first (rest sorted_data)) (if_then_else elem elem elem)) (rest sorted_data))))) 57.353 crossover
  (cons (if_then_else (len sorted_data) (first sorted_data) (if_then_else elem elem sorted_data)) (rest (cons sorted_data (cons (if_then_else (rest sorted_data) (first sorted_data) (if_then_else elem elem elem)) (rest sorted_data))))) 89.533 crossover
  (cons (first (if_then_else sorted_data sorted_data (cons elem (cons sorted_data sorted_data)))) (cons elem (rest sorted_data))) 91.635 crossover
(if_then_else sorted_data (cons (first sorted_data) (cons (if_then_else (rest sorted_data) (first (rest sorted_data)) (if_then_else elem elem elem)) (rest sorted_data))) (if_then_else sorted_data sorted_data (cons elem sorted_data))) 57.153 crossover
  (if_then_else sorted_data (cons (first sorted_data) (cons elem (rest sorted_data))) (if_then_else sorted_data sorted_data (cons elem sorted_data))) 91.435 crossover
  (if_then_else (first (cons (len elem) (or sorted_data sorted_data))) (rest (if_then_else (or elem sorted_data) (rest elem) (if_then_else sorted_data sorted_data elem))) (cons (if_then_else (rest sorted_data) (first (rest sorted_data)) (if_then_else elem elem elem)) sorted_data)) 118.440 mutatie

991 runs:
	201 zonder ontsnapping uit 77.6
	505 met 1 ontsnapping
	153 met in zelfde iter 2 ontsnappende childs
	79 met 3
	18 met 4
	13 met 5
	9 met 6
	5 met 7
	1 met 8
	4 met 9
	2 met 11
	1 met 12

In totaal 1348 ontsnappingen uit 77.6 in die 991 runs, waarvan 105 verschillend.

Van die 1348 ontsnappingen uit 77.6 hebben 243 die 77.6 als parent, waarvan 77 verschillend.  Van die 77 zijn 8 mutaties van 77.6.

De meestvoorkomende ontsnapping was naar 57.353.  Dit kwam 275 keer voor in 43 verschillende varianten.
De meest voorkomende variant (91 keer) was met 89.533 en 91.635 als parents.

Tja wat kunnen we hieruit concluderen?  
- het is niet zo dat er maar 1 of een beperkt aantal mogelijke ontsnappinggen bestaan.
  Er bestaan tenminste 105 verschillende manieren om te ontsnappen.
- dit zijn de ontsnappingsmogelijkheden die gedetecteerd zijn (doordat een ontsnapping gedetecteerd werd).
  We weten niet hoeveel ontsnappingen "gemist" zijn: dat de parents nodig voor ontsnapping wel in de populatie zaten,
  maar dat die twee parents per toeval niet met elkaar gekruisd werden.  Dit kan en ga ik nog verder onderzoeken.
- het is complex.  meer onderzoek is nodig.  :)


================ experiment 09ACB, om op de achtergrond de helepopulatie te kruisen
A kans op ontsnappen begint > 0 en groeit iedere iteratie.  Ontsnapping binnen 4 iteraties.  (5/30)
	0(1, 0.1), 2(3), 7(3), 17(4), 29(1)
B kans op ontsnappen begint bij 0, en blijft 0 of heel laag. Geen ontsnapping.  (12/30)
	3(6), 5(28), 11(38), 13(44), 14(*), 16(*), 18(8), 20(*), 21(*), 23(*), 27, 28
C kans op ontsnappen begint bij 0, en blijft 0 of heel laag, maar springt plotseling omhoog.  Ontsnapping (13/30)
	4(5), 6(3), 8(3), 9(6), 10(5), 12(5), 15(2), 19(3), 22(3), 24(4), 25(3), 26(2), 30(4)

Ontsnappen :
iter 1 : 2x
iter 2 : 2x
iter 3 : 7x
iter 4 : 3x
iter 5 : 3x
iter 6 : 1x

Hoi Victor,


Ik heb een experiment gedaan. Bij elke iteratie laat ik het normale aantal kinderen maken,
maar ook alle combinaties van parents onderzoeken om te tellen hoeveel ontsnappingen er mogelijk zijn in de populatie.
Gegeven dat aantal kan ik een verwachting bereken dat er ontsnapt gaat worden, en die vergelijken met de echte ontsnappingen.

Voorbeeld : dus 100 kinderen maken uit 200 parents zoals voorheen,
en daarnaast 200x200 parents kruisen tot 40000 kinderen.  Stel dat er daarvan 250 kinderen ontsnappen.
Dan is de verwachting op ontsnappingen bij die eerste 100 kinderen : 100 * 250 / (200 * 200) = 0.625,
dus ongeveer 50% kans om te ontsnappen die iteratie.

Mijn conclusie van 30 runs is:
- in 18 van de 30 runs kwam een redelijke kans om op ontsnappen, en werd er ook ontsnapt
- in 12 van de 30 runs was geen ontsnapping mogelijk : op bijna alle iteraties 0 ontsnappings routes; met zelden een losse iteratie met 2-3 ontsnappings routes (verwachting 0.02 ontsnappingen).
- langste ontsnapping duurde 6 iteraties.
- 17 van de 18 ontsnappingen vinden in hooguit 5 iteraties plaats.
- dus ofwel stoppen na 5 iteraties "vastzitten", ofwel 
- stevig opschudden na 5 iteraties "vastzitten".  We moeten dus zoeken naar een opschudding die de kans om de volgende 5 iteraties te ontsnappen flink vergroot.


groetjes,
Maarten

================================= 1e experiment om goede opschuddingen te vinden

kolom 1: #oplossingen in populatie
kolom 2: 66% parents behouden, random "leftover" kinderen toevoegen
kolom 3: 33% parents behouden, random "leftover" kinderen toevoegen
kolom 4: 66% parents behouden, best "leftover" kinderen toevoegen
kolom 5: 33% parents behouden, best "leftover" kinderen toevoegen
x	0	0	0	0	0
x	0	8	2	0	0
x	0	8	18	0	0
x	0	0	0	10	0
x	0	2	2	0	0
x	0	0	0	0	0
x	0	0	0	0	0
x	0	2	2	8	0
tot 0   20  24  18  0

Conclusie: beter minder parents behouden, en random  "leftover" kinderen toevoegen

================================= 2e experiment om goede opschudding te vinden

verschil is dat indien "stuck" de leftovers niet bewaard blijven.

Voorlopig resultaat na ~ 1/6e runnen
kolom 1 : 50% parents behouden, best "leftover" kinderen toevoegen
kolom 2 : 0% parents behouden, best "leftover" kinderen toevoegen
kolom 3 : 50% parents behouden, random "leftover" kinderen toevoegen
log_1003.txt:x	0	0	0
log_1016.txt:x	0	0	0
log_1019.txt:x	0	0	0
log_1027.txt:x	8	0	0
log_1049.txt:x	0	0	0
log_1055.txt:x	0	0	0
log_1056.txt:x	0	0	0
log_1084.txt:x	0	0	0
log_1086.txt:x	0	0	0
log_1096.txt:x	0	0	0
log_1092.txt:x	0	0	0

log_1011.txt:x	0	0	50
log_1033.txt:x	0	0	2
log_1038.txt:x	0	0	4
log_1042.txt:x	0	0	8
log_1043.txt:x	8	0	12
log_1054.txt:x	0	0	46
log_1060.txt:x	0	0	32
log_1066.txt:x	0	0	60
log_1067.txt:x	28	0	2
log_1070.txt:x	0	0	158
log_1074.txt:x	0	0	188
log_1090.txt:x	0	0	208
log_1095.txt:x	6	0	18

Conclusie:
	* random  "leftover" kinderen toevoegen!
	* een deel van de parents behouden lijkt essentieel om meteen een ontsnapping te vinden.

================================= 3e experiment om goede opschudding te vinden

Alles met random kinderen toevoegen
kolom 1 : 50% parents behouden
kolom 2 : 33% parents behouden
kolom 3 : 10% parents behouden
kolom 4 : 0% parents behouden


log_1003.txt:xx	0	0	18	0
log_1005.txt:xx	0	12	4	0
log_1014.txt:xx	0	0	0	0
log_1015.txt:xx	2	2	0	0
log_1016.txt:xx	74	90	0	0
log_1019.txt:xx	0	30	0	0
log_1021.txt:xx	0	0	8	0
log_1033.txt:xx	2	6	0	0
log_1038.txt:xx	0	0	8	0
log_1042.txt:xx	76	64	20	0
log_1046.txt:xx	352	0	0	0
log_1049.txt:xx	4	18	76	0
log_1084.txt:xx	6	78	56	0
log_1086.txt:xx	16	0	0	0
log_1090.txt:xx	0	0	40	0
log_1095.txt:xx	194	0	0	0
log_1096.txt:xx	0	0	0	0
log_1097.txt:xx	0	0	0	0
log_1099.txt:xx	2	2	0	0
log_1100.txt:xx	0	0	0	0
log_1106.txt:xx	0	0	0	0
log_1109.txt:xx	4	0	4	0
log_1110.txt:xx	114	168	4	0
log_1112.txt:xx	2	0	40	0
log_1120.txt:xx	8	12	8	
log_1125.txt:xx	100	60	48	
log_1126.txt:xx	0	12	0	

totals          956	554	334	0
countif>0       15	13	13	0

Dus voor voorlopig 50%

============================= geheugengebruik verminderen

done.

============================= 1000 runs met meta-evolution "pop mixen met 50% random left-behinds"

Lijkt niet significant beter.

Verklaring:
- metingen zijn incorrect
	- zijn de metingen wel reproduceerbaar?  Dit kan ik proberen op de seed 1000-1030, 09AC
		- is OK
	- moet ipv max_evals = 300000 hoger, bijvoorbeeld 450000, het maximum in 09AA in de versie met max 1200 sec
		- zou kunnen, maar 300000 is niet slecht of duidelijk fout.  Deze optie is niet de 1e keus om verder te onderzoeken
	- De 200x200 test bij vastzitten zegt niks over de performance bij een totale runnen
		- best left-behinds ook testen in 09ACC?
	- waarom herkt het verkleinen van aantal parents wel?
	- werkt taboo_value dan misschien beter dan taboo_set?
		- test

============================= 09AC : 1000 runs met altijd 50% van de parents random wegggooien

09AC_always = 09AA + fraction_parents fixed op 50% altijd, 
	solved 155/1000, max evals 300000, p enter subopt 96.2%, p stuck at subopt 84.4%, avg min err 32.84




