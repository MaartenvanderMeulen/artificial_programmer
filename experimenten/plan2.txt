*AA baseline [1000, 1000], [4, 1000]
    start generation 5 : 1x
    start generation 4 : 70x << 30 zijn eerder beslist, 37 worden hier beslist.
    67%
*AB [1000, 1000], [0, 1000], 60 seconden, met eerste
    79%
*AC [1000, 1000], [0, 1000], 60 seconden, met beste (ipv eerste betere), voor zowel cx als mut
    fixed bug in interpreting for loop
    0%
*AD == AB 
    75%
*AE [1000, 100], [0, 1000], 60 seconden, met eerste betere
    49%
    
*AF [1000, 50], [0, 1000], 60 seconden, met beste
    41%
*AF [1000, 100], [0, 1000], 60 seconden, met beste
    48%
*AF [1000, 200], [0, 1000], 60 seconden, met beste
    57%
*AF [1000, 300], [0, 1000], 60 seconden, met beste
    36%
*AF [1000, 200], [2, 1000], 60 seconden, met beste
    50%
*AF [1000, 300], [1, 1000], 60 seconden, met beste
    47%
*AF [1000, 200], [1, 1000], 60 seconden, met beste
    60%, 60%
*AF [1000, 150], [1, 1000], 60 seconden, met beste
    60%
*AF [1000, 100], [1, 1000], 60 seconden, met beste
    66%
*AF [1000, 75], [1, 1000], 60 seconden, met beste
    62%
*AF [1000, 50], [1, 1000], 60 seconden, met beste
    54%
*AF [1000, 100], [2, 1000], 60 seconden, met beste
    59%
*AF [1000, 100], [3, 1000], 60 seconden, met beste
    65%
*AF [1000, 100], [0, 1000], 60 seconden, met beste
    48%
*AF conclusie: [1000, 100], [1, 1000], 60 seconden, met beste
    66%
    
----------------------
ouders selecteren:
    * hoe beter de evaluatie hoe meer kans.  p_fitness = (1 - eval/max_eval) ** alpha
    * hoe verder de outputs uit elkaar liggen hoe meer kans.  p_complementair = verschillende_outputs(parent1, parent2) / aantal_outputs
    * p = (p_fitness(parent1) * p_fitness(parent2)) ^ alpha * p_complementair(parent1, parent2) ^ beta
*AG alpha=1, beta=1
    70
*AG alpha=2, beta=1
    68
*AG alpha=1, beta=2
    69
*AG alpha=1, beta=0.5
    68
*AG alpha=0.5, beta=1
    69
    
--------------------------

En wat als we nu 120 seconden zoeken, meer in het algemeen, wanneer wordt het 100%?
*AH [1000, 100], [1, 1000], 120 seconden, alpha=1, beta=1:
    73%

-------------------------

alternatief is additieve functie
*AG alpha=2, beta=1
    65%
*AG alpha=1, beta=1
    68%
*AG alpha=1, beta=2
    75%
*AG alpha=1, beta=3
    72%
*AG alpha=1, beta=4
    72%
*AG alpha=1, beta=5
    72%
    
-------------------------

En aantal iteraties in ouders selecteren... 5, 15:
*AG iter=1
    65%
*AG iter=2
    69%
*AG iter=3
    79%
*AG iter=4
    77%
*AG iter=5
    78%
*AG iter=10
    75%
*AG iter=15
    68%


-------------------------
Maar misschien is er nu wel iets beters dan [1000, 100], [1, 1000], 60 sec, alpha=1, beta=2, p=additief, best_of_n_cx=3
Iets meer diversiteit bijvorbeeld.
*AG [1000, 75], [1, 1000]
    77%
*AG [1000, 125], [1, 1000]
    77%
*AG [1000, 100], [2, 1000]
    74%

----------------------------

[1000, 100], [1, 1000], 60 sec, alpha=1, beta=2, p=additief, best_of_n_cx=3
parachute size weer onzerzoeken
*AG [800, 100], [1, 1000]
    69%
*AG [1000, 100], [1, 1000]
    79%
*AG [1200, 100], [1, 1000]
    79%
*AG [1500, 100], [1, 1000]
    76%    
*AG [2000, 100], [1, 1000]
    80%
*AG [2500, 100], [1, 1000]
    73%    
*AG [3000, 100], [1, 1000]
    60%    
*AG [4000, 100], [1, 1000]
    21%
*AG [8000, 100], [1, 1000]
    1%

----------------------------
[2000, 100], [1, 1000], 60 sec, alpha=1, beta=2, p=additief, best_of_n_cx=3
*AG best_of_n_mut=1
    73
*AG best_of_n_mut=2
    80
*AG best_of_n_mut=3
    76
*AG best_of_n_mut=4
    85
-----------------------------
terugbrengen naar 50%
pop_size=[2000, 100], ngen=[1, 1000], alpha=1, beta=2, p=additief, best_of_n_cx=3, best_of_n_mut=4
seconds=30
    10%
seconds=40
    49%
seconds=45
    61%
seconds=50
    73%
seconds=60
    85%

--------------------------------
pop_size=[2000, 100], ngen=[1, 1000], alpha=1, beta=2, p=additief, best_of_n_cx=3, seconds=40
Nogmaals best_of_n_mut onderzoeken
*AG best_of_n_mut=2
    52%
*AG best_of_n_mut=3
    46%
*AG best_of_n_mut=4
    49%
*AG best_of_n_mut=5
    56%
*AG best_of_n_mut=6
    ?%
*AG best_of_n_mut=7
    ?%
*AG best_of_n_mut=8
    ?%
*AG best_of_n_mut=9
    ?%

--------------------------------
pop_size=[2000, 100], ngen=[1, 1000], alpha=1, beta=2, p=additief, best_of_n_cx=3, seconds=40, best_of_n_mut=2
crossover_with_local_search : onderzoeken of sorteren parent1, parent2 wel zin heeft.
*AG sort_cx_parents=True
    52%
*AG sort_cx_parents=False
    39%

--------------------------------
pop_size=[2000, 100], ngen=[1, 1000], alpha=1, beta=2, p=additief, best_of_n_cx=3, seconds=40, best_of_n_mut=2, sort_cx_parents=True
met python -O voor alle behalve de eerste runs.
    54%
    Gemiddelde # evaluaties 6385; mediaan 
    Gemiddelde cx% 88%; mediaan 100% (29 van de 54 oplossingen gebruiken 100% cx)
    Gemiddelde gen 3.1; mediaan 3

--------------------------------
pop_size=[2000, 100], ngen=[1, 1000], alpha=1, beta=2, p=additief, best_of_n_cx=3, seconds=40, best_of_n_mut=2, sort_cx_parents=True
* cx=0.9, nchildren=[2000, 40]
    40%
* cx=0.9, nchildren=[2000, 60]
    15%
* cx=0.9, nchildren=[2000, 80]
    10%
* cx=0.9, nchildren=[2000, 100]
    7%
* cx=0.7, nchildren=[2000, 100]
    19%
* cx=0.5, nchildren=[2000, 100]
    54%, 54%

-------------------------------
pop_size=[1000, 100], ngen=[1, 1000], alpha=1, beta=2, p=additief, best_of_n_cx=3, seconds=40, best_of_n_mut=2, sort_cx_parents=True
vreemd.  Eens overniew doen met 1000 parachuutjes
* cx=0.9, nchildren=[1000, 40]
    66%
* cx=0.9, nchildren=[1000, 60]
    65%
* cx=0.9, nchildren=[1000, 80]
    56%
* cx=0.9, nchildren=[1000, 100]
    39%
* cx=0.7, nchildren=[1000, 100]
    55%
* cx=0.5, nchildren=[1000, 100]
    69%
    Gemiddelde # evaluaties 4509; mediaan  4455
    Gemiddelde cx% 86%; mediaan 89% (28 van de 69 oplossingen gebruiken 100% cx)
    Gemiddelde gen 3.7; mediaan 4

-------------------------------
* cx=0.88, nchildren=[1000, 50]
    55
* cx=0.88, nchildren=[1000, 57]
    56
* cx=0.88, nchildren=[1000, 64]
    58
* cx=0.86, nchildren=[1000, 50]
    63
* cx=0.86, nchildren=[1000, 57]
    62
* cx=0.86, nchildren=[1000, 64]
    54

-------------------------------
* cx=0.6, nchildren=[1000, 100]
    66
* cx=0.5, nchildren=[1000, 100]
    69
* cx=0.4, nchildren=[1000, 100]
    72
* cx=0.3, nchildren=[1000, 100]
    68

-------------------------------
pop_size=[1000, 100], nchildren=[1000, 100], ngen=[1, 1000], alpha=1, beta=2, p=additief, best_of_n_cx=3, seconds=40, best_of_n_mut=2, sort_cx_parents=True, cx=0.4
estimate_improvement = sum([eval1-eval2 for eval1, eval2 in zip(parent1.model_evals, parent2.model_evals) if eval1 > eval2])
* beta 3
    71
* beta 2
    71
* beta 1
    73
* beta 0.5
    73
* beta 0.4
    75
* beta 0.3
    76
* beta 0.2
    72
* beta 0.1
    74
* beta 0.0
    68

--------------------------------
pop_size=[1000, 100], nchildren=[1000, 100], ngen=[1, 1000], beta=0.3, seconds=???, best_of_n_cx=3, best_of_n_mut=2, cx=0.4
terugbrengen naar 50%
* seconds=25
    52%

-------------------------------------------------
pop_size=[1000, ???], nchildren=[1000, 100], ngen=[1, 1000], beta=0.3, seconds=25, best_of_n_cx=3, best_of_n_mut=2, cx=0.4
* pop_size=[1000, 100]    
    52
* pop_size=[1000, 200]   
    55
* pop_size=[1000, 400]
    51
* pop_size=[1000, 800]

-------------------------------
pop_size=[1000, 200], nchildren=[1000, 100], ngen=[1, 1000], beta=0.3, seconds=25, best_of_n_cx=???, best_of_n_mut=2, cx=0.4
* best_of_n_cx=4
    55
* best_of_n_cx=5
    51
* best_of_n_cx=6
    44
* best_of_n_cx=3
    55

---------------------------
* seconds=60
    82%

---------------------------
Onderzoek 145:
    * hoe zijn de gehele populaties?
    * hoe zijn de evaluaties van de oplossing berekend?
    * onderstaande hebben erg verschillende scores, moet daar niet wat aan gedaan worden?
            ind 0 0.8166666666666667 3 are_all_equal(get_col_sums(board))
            ind 1 1.8333333333333335 3 are_all_equal(get_row_sums(board))
            ind 2 1.9666666666666668 3 are_all_equal(get_diag_sums(board))
        er zijn 11 problems, ideaal zou zijn:
            # magische diagonalen, magische kolommen, # magische rijen
            0 0 0
            0 0 3
            0 3 0
            0 3 3
            2 0 0
            2 0 3
            2 3 0
            2 3 3
            special :
            2 3 1
            2 1 3
            1 3 3
    * wanneer moet er een penalty voor "geen effect van input" zijn, en hoe hoog moet die zijn>
