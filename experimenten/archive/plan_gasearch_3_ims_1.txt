params_01.txt, level-2, maar met grotere zoekruimte.  3%.  
params_02.txt, als 01, maar "penalize_not_reacting_on_input": true, 0%.  Theorie : komt doordat getuned is op "false".

problems.txt : eval_is_magic_all_old, A, 11
params_03.txt
    3/3

problems.txt : eval_is_magic_all_old, A, 14
params_03.txt
    3/3

problems.txt : eval_is_magic_all_old, AB, 14
params_03.txt
    1/3

problems.txt : eval_is_magic_all_old, AB, 11
params_03.txt
    2/3

problems.txt : eval_is_magic_all_old, AB, 14, seconds=80
params_03.txt
    1/3
    
problems.txt : eval_is_magic_all_old, AB, 11', seconds=80
params_03.txt
    1/3

problems.txt : eval_is_magic_all_old, AB, 11', seconds=80
params_03.txt
    1/3
    
======================= over naar de NUC (i7, 3.1 GHz, 2 cores, 4 threads)

params_03.txt
    2/4, 8/12, 33/48, 61/100
    
params_04.txt : = param_03 met {"seconds": 60}

======================= bugfix "eval, individual.model_outputs, individual.model_evals = toolbox.eval_cache[deap_str]"
======================= bugfix "p_fitness1 = (1 - parent1.eval/(max_eval*1.1))"
problems.txt, 11''
.sh's met allen -O (behave seed 100)

params_04.txt
    63%
problems.txt : + eq and if. params_04.txt
    94%
problems.txt : + list2 last2 at2. params_04.txt
    88%
problems.txt : + list3 last3 at3. params_04.txt
    69%
problems.txt : + rest functions. params_04.txt
    64%
    
problems.txt : + more variables (j, k, n).

params_05.txt : parachute size 1000, pop_size[1] = 200
    22%
params_05.txt : parachute size 500
    17%
params_05.txt : parachute size 2000
    22%
params_05.txt : parachute size 4000
    15%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 300
    21%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 150
    15%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 200 was ok. nchildren = 75
    15%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 200 was ok. nchildren = 125
    15%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 200 was ok. nchildren = 100 was ok. pcrossover 0.5
    18%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 200 was ok. nchildren = 100 was ok. pcrossover 0.4 houden we, want 24% is niet veel beter en 0.3 is zo raar.
    22%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 200 was ok. nchildren = 100 was ok. pcrossover 0.3
    24%
params_05.txt : parachute size 1000 was ok. pop_size[1] = 200 was ok. nchildren = 100 was ok. pcrossover 0.2
    17%
params_05.txt : pop ok, pcx ok.  "best_of_n_mut": 3
    19%
params_05.txt : pop ok, pcx ok, best_of_n_mut ok, "best_of_n_cx": 4
    22%
params_05.txt : pop ok, pcx ok, best_of_n_mut ok, "best_of_n_cx": 2
    16%
params_05.txt : pop ok, pcx ok, best_of_n_mut ok, "best_of_n_cx": 3 houden we.  "weight_complementairity": 0.3 baseline
    22%
params_05.txt : pop ok, pcx ok, best_of_n_mut ok, "best_of_n_cx": 3 houden we.  "weight_complementairity": 0.4, is volgens paradigit test beter
    21%

dus params_05.txt == params_04.txt is OK.
    22%

problems.txt : variables (i j), constants (0 1)
    29%


=======================
sync; python search.py 100 experimenten/params_07.txt

resultaat di 24 Nov (na fix bug "interpret clear loop variable value after for loop")
solved	30	sec	9742	evals	get_col	for(board, for(col, board, col), at2(board, col))
solved	4	sec	3615	evals	get_diag1	for('i', len(board), at3(board, 'i', 'i'))
timeout	60	sec	50116	evals	get_diag2	
timeout	60	sec	55969	evals	get_diag2	
timeout	60	sec	53333	evals	get_diag2	
timeout	60	sec	52661	evals	get_diag2	
solved	31	sec	30159	evals	get_diag2	for('i', for(board, len(for('i', sub(len(board), board), sub(sub('i', 1), for(board, 1, 1)))), board), at3(board, 'i', sub(1, sub('i', 1))))
solved	43	sec	51590	evals	get_magic_number_n	add(div(mul(n, 2), mul(mul(2, 1), div(n, div(add(1, n), 2)))), add(mul(div(n, 2), mul(mul(div(add(n, 1), 2), mul(2, 1)), n)), mul(div(1, 2), mul(2, 1))))
timeout	60	sec	60950	evals	are_all_equal	
timeout	60	sec	60524	evals	are_all_equal	
timeout	60	sec	67015	evals	are_all_equal	
timeout	60	sec	74468	evals	are_all_equal	
solved	10	sec	15194	evals	are_all_equal	eq(for(eq(values, 'v'), len(values), at2(values, values)), values)
solved	6	sec	3685	evals	get_row_sums	for('row', board, sum('row'))
timeout	60	sec	8279	evals	get_col_sums	
solved	18	sec	6363	evals	get_col_sums	for('i', len(for(board, board, board)), sum(get_col(board, 'i')))
solved	0	sec	198	evals	get_diag_sums	list2(sum(get_diag1(board)), sum(get_diag2(board)))
timeout	60	sec	42342	evals	is_magic_square	
timeout	60	sec	24003	evals	is_magic_square	
timeout	60	sec	22351	evals	is_magic_square	
timeout	60	sec	25531	evals	is_magic_square	
timeout	60	sec	20028	evals	is_magic_square	
timeout	60	sec	23904	evals	is_magic_square	
solved	33	sec	18921	evals	is_magic_square	if(are_all_equal(get_diag_sums(board)), if(are_all_equal(get_row_sums(board)), are_all_equal(get_col_sums(board))))

TODO:
* verkorten van de oplossingen