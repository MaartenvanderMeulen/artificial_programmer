GA-SEARCH

TODO
* sort
        
SOMEDAY
* hyperparameter tuning met 1000 runs, op params_07.txt
* Interpretator : omzetten naar C++ (en daarna naar OpenCL)

====================================== 5 dec =============================

TODO
* is_sorted

python solve_problems.py 1000 experimenten/params_08.txt
        
    
08 : 1000 runs opgestart.  Ongeveer 50% wordt opgelost, dat is wat veel, de input iets moeilijker maken
08A : mindder constanten (0 1), en enkele iets langere tests
08B : meer random getallen.  15x solved.  allemaal "funny functions"
08C : 16 trainingsamples, in oplopende lengte
08D : use only 0-1, 64 training examples


===================================== ... =================================
08E : combinatie van alle trainingsets.  parachuting 10000, 900 sec.  Lukt niet
08F : parachuting 4000, 1800 sec, recursie en "car,cdr,cons" style.  Lukt, maar de recursieve code is vrij onbegrijpelijk
08G : genereert recusieve is_sorted functie.  Definitie van and en or iets aangepast, nu is de code leesbaarder.

=================================== 9 dec ===================================
08H skipped vanwege vergissing
08I skipped vanwege I
08J : voortgezette optimalisatie op 08G

09A, merge, wordt 1x opgelost van de 28.
09B, voortgezette optimalisatie geeft crash.  python solve_problems.py 1000 experimenten/params_09B.txt

===================================== 10 dec ============================================

Bug in 09B met convert_code_to_deap_str opgelost.

TODO
done zorg dat ind's nooit langer worden dan max_individual_size
done 09B op 28 threads
done 10A sort
done find shortest solution

====================================== 12 dec ==========================================

09AA .  Aantal unieke individuals in alle 1000 runs bepalen.
- check op fillin up memory verbeteren
- Elke unieke individual wordt bewaard in de toolset, en aan het eind weggeschreven net zoals write_population
- Een los programma maken dat alle 1000 unieke sets inleest, ze allemaal samenvoegt tot 1 set, en daar de grootte van wegschrijft

python solve_problems.py 1921 experimenten/params_09AA.txt

==================================== 13 dec ========================================

if A or B then C else Dat
if not A and not B then D else C
if (if A then False else not B)

github 

===================================================== 17 dec ===========================


file tmp/09AA/log_1888.txt enter+miss 0 + 0 (die file komt er nooit)
p enter subopt 0.9469469469469469 check 999
p stuck at subopt 0.9945425087405133 check 117270

tmp/09AA/log_1888.txt

================================================= 19 Dec===========================================
met fractie parents wegggooien (09AC):

Duurde 13 uur en 32 minuten (24 threads)

207 oplossingen

p enter subopt 0.9433962264150944 check 1007
p stuck at subopt 0.9460122699386503 check 17115

Aantal generaties bij de oplossinen:
    10
    ...
	66	
	68	
	73	
	76	
	77	
	78	
	79	
	80	
	92	
	93	
	96	
	134	
	135	
	137	
	143	
Dus max generatie 145 is prima om dit resultaat te reproduceren

================================================= 19 Dec nu met max generatie 146 en 20 minuten =======



=========================================================== 20 Dec 09ACA =====================

= 09AC met
	- paranets_fraction meteen weer op 1 indien verandering van beste waarde
	- grote opschudding = alle individuals met beste waarde VOOR maken van kinderen verwijderen (uit de GENE pool)

statistics
	- 263 solved, 728 stopped (allemaal timeout 1200 seconden)
	- p enter subopt 0.6366711772665764
	- p stuck at subopt 0.8853018372703412
		- count enter subopt 941 count through subopt 537
		- count stuck at subopt 3373 count leave subopt 437

================================== 21 Dec 09ACB, geheugengebruik reduceren =====================

tmp/09ACA/log_1056.txt, 140 iteraties.  Geheugengebruik met
/usr/bin/time -v python solve_problems.py 1056 experimenten/params_09ACB.txt
Command exited with non-zero status 1
	Command being timed: "python solve_problems.py 1056 experimenten/params_09ACB.txt"
	User time (seconds): 1198.85
	System time (seconds): 1.47
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 20:00.66
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 1941344
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 779991
	Voluntary context switches: 1
	Involuntary context switches: 118971
	Swaps: 0
	File system inputs: 0
	File system outputs: 576
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1

Dus 1.9 GB

ps:
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
maarten  13051  100 11.8 2149044 1940832 pts/0 R+   13:15  19:59 python solve_problems.py 1056 experimenten/params_09ACB.txt

Dus 2.1 GB

=== zonder set van strings van alle ooit onderzochte  individuales:
Command exited with non-zero status 1
	Command being timed: "python solve_problems.py 1056 experimenten/params_09ACB.txt"
	User time (seconds): 1198.91
	System time (seconds): 1.40
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 20:00.66
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 1955928
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 743685
	Voluntary context switches: 1
	Involuntary context switches: 119214
	Swaps: 0
	File system inputs: 0
	File system outputs: 592
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1

=== slimmere opslag van toolbox.eval_cache
Command exited with non-zero status 1
	Command being timed: "python solve_problems.py 1056 experimenten/params_09ACB.txt"
	User time (seconds): 1199.14
	System time (seconds): 0.91
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 20:00.37
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 953700
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 497735
	Voluntary context switches: 1
	Involuntary context switches: 119522
	Swaps: 0
	File system inputs: 0
	File system outputs: 384
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 1

Dus 1.0 GB, dat scheelt!

================================= 09ACB & 09ACC

09ACB : 31 threads, run 21 Dec 23:07 - 22 Dec 08:28


WAITLIST:
	09ACC == 09ACB met 16 threads
	09ACA3 = 09ACA (taboo & paranet_fraction op 1 na verandering) met max 300000 evaluaties
	09AC3 = 09AC parent_fraction) met max 300000 evaluaties
	09AC3 = 09AC parent_fraction) met max 300000 evaluaties

		TODO


max_evaluations : 300000
kijken of 09ACB en 09ACC verschillen

DAARNA :
- fraction_parents aanpassing --> - 20% * write_population
- taboo van set van waarden naar 1 waarde
- offspring voorrang geven indien we in suboptimum zitten (kan ook door #parents eerst 50% te laten zijn)